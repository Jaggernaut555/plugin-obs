{"version":3,"file":"index.fd690b7f.js","sources":["../../vite/dynamic-import-polyfill","../../src/main.ts"],"sourcesContent":["const p = function polyfill(modulePath = '.', importFunctionName = '__import__') {\n    try {\n        self[importFunctionName] = new Function('u', `return import(u)`);\n    }\n    catch (error) {\n        const baseURL = new URL(modulePath, location);\n        const cleanup = (script) => {\n            URL.revokeObjectURL(script.src);\n            script.remove();\n        };\n        self[importFunctionName] = (url) => new Promise((resolve, reject) => {\n            const absURL = new URL(url, baseURL);\n            // If the module has already been imported, resolve immediately.\n            if (self[importFunctionName].moduleMap[absURL]) {\n                return resolve(self[importFunctionName].moduleMap[absURL]);\n            }\n            const moduleBlob = new Blob([\n                `import * as m from '${absURL}';`,\n                `${importFunctionName}.moduleMap['${absURL}']=m;`\n            ], { type: 'text/javascript' });\n            const script = Object.assign(document.createElement('script'), {\n                type: 'module',\n                src: URL.createObjectURL(moduleBlob),\n                onerror() {\n                    reject(new Error(`Failed to import: ${url}`));\n                    cleanup(script);\n                },\n                onload() {\n                    resolve(self[importFunctionName].moduleMap[absURL]);\n                    cleanup(script);\n                }\n            });\n            document.head.appendChild(script);\n        });\n        self[importFunctionName].moduleMap = {};\n    }\n};__VITE_IS_MODERN__&&p(\"assets/\");","import { Assignment, ButtonType } from \"midi-mixer-plugin\";\nimport OBSWebSocket from \"obs-websocket-js\";\n\ninterface Settings {\n  address?: string;\n  password?: string;\n}\n\nconst obs = new OBSWebSocket();\nlet sources: Record<string, Assignment> = {};\nlet scenes: Record<string, ButtonType> = {};\nconst settingsP: Promise<Settings> = $MM.getSettings();\nlet currentScene = \"\";\n\nconst connect = async () => {\n  const settings = await settingsP;\n\n  return obs.connect({\n    address: settings.address ?? \"localhost:4444\",\n    password: settings.password ?? \"\",\n  });\n};\n\nconst registerListeners = () => {\n  obs.on(\"SourceVolumeChanged\", (data) => {\n    const source = sources[data.sourceName];\n    if (!source) return;\n\n    source.volume = data.volume;\n  });\n\n  obs.on(\"SourceMuteStateChanged\", (data) => {\n    const source = sources[data.sourceName];\n    if (!source) return;\n\n    source.muted = data.muted;\n  });\n\n  obs.on(\"SwitchScenes\", (data) => {\n    currentScene = data[\"scene-name\"];\n\n    Object.values(scenes).forEach((button) => {\n      button.active = data[\"scene-name\"] === button.id;\n    });\n  });\n};\n\nconst mapSources = async () => {\n  const data = await obs.send(\"GetSourcesList\");\n\n  data.sources?.forEach(async (source: any) => {\n    const [volume, muted] = await Promise.all([\n      obs\n        .send(\"GetVolume\", {\n          source: source.name,\n        })\n        .then((res) => res.volume),\n      obs\n        .send(\"GetMute\", {\n          source: source.name,\n        })\n        .then((res) => res.muted),\n    ]);\n\n    const assignment = new Assignment(source.name, {\n      name: source.name,\n      muted,\n      volume,\n    });\n\n    assignment.on(\"volumeChanged\", (level: number) => {\n      obs.send(\"SetVolume\", {\n        source: source.name,\n        volume: level,\n      });\n    });\n\n    assignment.on(\"mutePressed\", () => {\n      obs.send(\"SetMute\", {\n        source: source.name,\n        mute: !assignment.muted,\n      });\n    });\n\n    sources[source.name] = assignment;\n  });\n};\n\nconst mapScenes = async () => {\n  const data = await obs.send(\"GetSceneList\");\n\n  currentScene = data[\"current-scene\"];\n\n  data.scenes.forEach((scene) => {\n    const button = new ButtonType(scene.name, {\n      name: `OBS: Switch to \"${scene.name}\" scene`,\n      active: scene.name === currentScene,\n    });\n\n    button.on(\"pressed\", () => {\n      obs.send(\"SetCurrentScene\", {\n        \"scene-name\": scene.name,\n      });\n\n      button.active = true;\n    });\n\n    scenes[scene.name] = button;\n  });\n};\n\nconst init = async () => {\n  obs.disconnect();\n  sources = {};\n  scenes = {};\n\n  try {\n    $MM.setSettingsStatus(\"status\", \"Connecting...\");\n\n    await connect();\n    registerListeners();\n    await Promise.all([mapSources(), mapScenes()]);\n\n    $MM.setSettingsStatus(\"status\", \"Connected\");\n  } catch (err) {\n    console.warn(\"OBS error:\", err);\n    $MM.setSettingsStatus(\"status\", err.description || err.message || err);\n  }\n};\n\n$MM.onSettingsButtonPress(\"reconnect\", init);\n\ninit();\n"],"names":["modulePath","importFunctionName","Function","error","baseURL","URL","location","cleanup","script","revokeObjectURL","src","remove","url","Promise","resolve","reject","absURL","self","moduleMap","moduleBlob","Blob","type","Object","assign","document","createElement","createObjectURL","[object Object]","Error","head","appendChild","p","obs","OBSWebSocket","sources","scenes","settingsP","$MM","getSettings","currentScene","mapSources","async","send","forEach","source","volume","muted","all","name","then","res","assignment","Assignment","on","level","mute","mapScenes","data","scene","button","ButtonType","active","scene-name","init","disconnect","setSettingsStatus","settings","connect","address","password","sourceName","values","id","err","warn","description","message","onSettingsButtonPress"],"mappings":"iDAAU,SAAkBA,EAAa,IAAKC,EAAqB,uBAEtDA,GAAsB,IAAIC,SAAS,IAAK,0BAE1CC,SACGC,EAAU,IAAIC,IAAIL,EAAYM,UAC9BC,EAAWC,QACTC,gBAAgBD,EAAOE,OACpBC,eAENV,GAAuBW,GAAQ,IAAIC,SAAQ,CAACC,EAASC,WAChDC,EAAS,IAAIX,IAAIO,EAAKR,MAExBa,KAAKhB,GAAoBiB,UAAUF,UAC5BF,EAAQG,KAAKhB,GAAoBiB,UAAUF,UAEhDG,EAAa,IAAIC,KAAK,CACxB,uBAAuBJ,MACvB,GAAGf,gBAAiCe,UACrC,CAAEK,KAAM,oBACLb,EAASc,OAAOC,OAAOC,SAASC,cAAc,UAAW,CAC3DJ,KAAM,SACNX,IAAKL,IAAIqB,gBAAgBP,GACzBQ,YACW,IAAIC,MAAM,qBAAqBhB,QAC9BJ,IAEZmB,WACYV,KAAKhB,GAAoBiB,UAAUF,MACnCR,eAGPqB,KAAKC,YAAYtB,WAEzBP,GAAoBiB,UAAY,IAEvBa,CAAE,WC5BxB,MAAMC,EAAM,IAAIC,EAChB,IAAIC,EAAsC,GACtCC,EAAqC,GACzC,MAAMC,EAA+BC,IAAIC,cACzC,IAAIC,EAAe,GAEnB,MAiCMC,EAAaC,gCACET,EAAIU,KAAK,mBAEvBR,YAASS,SAAQF,MAAOG,UACpBC,EAAQC,SAAejC,QAAQkC,IAAI,CACxCf,EACGU,KAAK,YAAa,CACjBE,OAAQA,EAAOI,OAEhBC,MAAMC,GAAQA,EAAIL,SACrBb,EACGU,KAAK,UAAW,CACfE,OAAQA,EAAOI,OAEhBC,MAAMC,GAAQA,EAAIJ,UAGjBK,EAAa,IAAIC,aAAWR,EAAOI,KAAM,CAC7CA,KAAMJ,EAAOI,KACbF,MAAAA,EACAD,OAAAA,MAGSQ,GAAG,iBAAkBC,MAC1BZ,KAAK,YAAa,CACpBE,OAAQA,EAAOI,KACfH,OAAQS,SAIDD,GAAG,eAAe,OACvBX,KAAK,UAAW,CAClBE,OAAQA,EAAOI,KACfO,MAAOJ,EAAWL,aAIdF,EAAOI,MAAQG,MAIrBK,EAAYf,gBACVgB,QAAazB,EAAIU,KAAK,kBAEbe,EAAK,mBAEftB,OAAOQ,SAASe,UACbC,EAAS,IAAIC,aAAWF,EAAMV,KAAM,CACxCA,KAAM,mBAAmBU,EAAMV,cAC/Ba,OAAQH,EAAMV,OAAST,MAGlBc,GAAG,WAAW,OACfX,KAAK,kBAAmB,CAC1BoB,aAAcJ,EAAMV,SAGfa,QAAS,OAGXH,EAAMV,MAAQW,MAInBI,EAAOtB,YACPuB,eACM,KACD,WAGHC,kBAAkB,SAAU,sBAvGpBxB,yBACRyB,QAAiB9B,SAEhBJ,EAAImC,QAAQ,CACjBC,QAAS,WAASA,WAAW,iBAC7BC,SAAU,WAASA,YAAY,MAoGzBF,KA/FJd,GAAG,uBAAwBI,UACvBb,EAASV,EAAQuB,EAAKa,YACvB1B,MAEEC,OAASY,EAAKZ,aAGnBQ,GAAG,0BAA2BI,UAC1Bb,EAASV,EAAQuB,EAAKa,YACvB1B,MAEEE,MAAQW,EAAKX,YAGlBO,GAAG,gBAAiBI,MACPA,EAAK,qBAEbc,OAAOpC,GAAQQ,SAASgB,MACtBE,OAASJ,EAAK,gBAAkBE,EAAOa,eA+E1C3D,QAAQkC,IAAI,CAACP,IAAcgB,UAE7BS,kBAAkB,SAAU,mBACzBQ,WACCC,KAAK,aAAcD,OACvBR,kBAAkB,SAAUQ,EAAIE,aAAeF,EAAIG,SAAWH,KAItEpC,IAAIwC,sBAAsB,YAAad,GAEvCA"}